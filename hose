#!/usr/bin/env ruby
USAGE = <<EOF
依存関係を気にしながらタスクを実行します

Usage:
  #{$0} <TASK> [OPTIONS]

OPTIONS:
  -C <FILE>   Hosefileを指定します。省略した場合、カレントディレクトリから読み込みます
  -T, --tasks タスク一覧を表示します
  -o <FILE>   成果物の出力パスを指定します。「-」を指定すると標準出力に書き出します。省略すると何も出力しません。
EOF

require 'etc'
require 'fileutils'
require 'thwait'
require 'tmpdir'
require 'tsort'

class Hash
  include TSort
  alias tsort_each_node each_key
  def tsort_each_child(node, &block)
    fetch(node).each(&block)
  end
end

module Hose
  #
  # Hosefileで定義されるタスクを表現するクラス
  #
  class Task < Struct.new(:name, :stdin, :files, :block)
    def self.tasks
      @tasks ||= Hash.new
    end

    def self.require_envs
      @require_envs ||= Hash.new
    end

    def deps
      if stdin
        [stdin, *files].uniq
      else
        files
      end
    end
  end

  #
  # Taskの実行時情報
  #
  class TaskInstance < Struct.new(:task, :dir)
    def run(thmap, tail_pids)
      FileUtils.touch File.join(dir, task.name + ".out")
      env = {}
      task.files.each do |name|
        env[name] = File.join(dir, "#{name}.out")
      end

      r, w = IO.pipe
      if task.stdin
        task_name = task.stdin
        file = File.join(dir, task_name + ".out")
        pid = Process.fork do
          r.close
          exec('tail', '-f', file, out: w)
        end
        tail_pids[task_name] << pid
      end
      pid = Process.fork do
        w.close
        run_after_fork(env, r)
      end
      r.close
      w.close

      if task.files.size > 0
        # プロセスの起動はそんなに速くないので、ここでSTOPで間に合う
        Process.kill :STOP, pid
        Thread.start do
          task.files.each do |name|
            thmap[name].value
          end
          Process.kill(:CONT, pid)
        end
      end
      detach = Process.detach(pid)
      detach.name = task.name
      thmap[task.name] = detach
    end

    def run_after_fork(env, stdin)
      outfile = File.join(dir, task.name + ".out")
      ENV.update(env)
      $stdin.reopen(stdin)
      $stdout.reopen(outfile, 'w')
      # $stderr.reopen(File.join(dir, task.name + ".err"), 'w')
      begin
        ok = instance_eval(&task.block)
        exit(ok ? 0 : 1)
      rescue => e
        $stderr.puts e.message
        exit 1
      end
    end

    def bash(src)
      fname = File.join(dir, task.name + ".bash")
      File.write(fname, src)
      system('bash', fname)
    end
  end

  #
  # 一連の流れを制御するクラス
  #
  class TaskRunner
    def self.run(name, outfile)
      self.new.run(name, outfile)
    end

    def run(name, outfile)
      Task.require_envs.keys.each do |key|
        raise "環境変数 \"#{key}\" が設定されていません" unless ENV.has_key?(key)
      end

      Process.setpgid(0, 0)
      list = task_list(name)
      Dir.mktmpdir do |tmpdir|
        $stdout.puts "#{tmpdir} (#{Process.pid})"
        thmap = {} # :: String -> Thread::Detach
        tail_pids = Hash.new{|h,k| h[k] = [] }
        list.each do |name|
          task = Task.tasks[name]
          TaskInstance.new(task, tmpdir).run(thmap, tail_pids)
        end
        all_ok = wait_finish(thmap.values, tail_pids)
        raise '完了できませんでした' unless all_ok

        if outfile
          src = File.join(tmpdir, "#{list.last}.out")
          if outfile == '-'
            File.open(src, 'r') do |f|
              $stdout.write f.read
            end
          else
            FileUtils.cp src, outfile
          end
        end
      end
    end

    private

    def task_list(name)
      task = Task.tasks[name]
      raise "タスク #{name} とが見つかりません" unless task

      que = [task]
      dep_graph = {}
      while t = que.pop
        deps = t.deps
        deps.each do |dep|
          unless dep_graph.key? dep
            dep_task = Task.tasks[dep]
            raise "タスク #{dep} が見つかりません（#{t.name} が依存）" unless dep_task
            que.push dep_task
          end
        end
        dep_graph[t.name] = deps
      end
      return dep_graph.tsort
    end

    def wait_finish(threads, tail_pids)
      killall = false
      thall = ThreadsWait.new(*threads)
      until thall.empty?
        th = thall.next_wait
        if tail_pids.has_key?(th.name)
          # 今終わったプロセスの出力ファイルを tail しているプロセスに INT を送る
          Process.kill :INT, *tail_pids[th.name]
        end
        log_result(th.name, th.value.exitstatus == 0)
        if th.value.exitstatus != 0 && !killall
          # 初めて失敗したプロセスが見つかったときに、残りの全プロセスに TERM を送る
          killall = true
          pids = thall.threads.find_all(&:alive?).map(&:pid)
          Process.kill :TERM, *pids if pids.size > 0
        end
      end
      return !killall
    end

    def log_result(name, success)
      if $stdout.tty?
        mark = success ? ("\e[32m%s\e[m" % "✓") : ("\e[31m%s\e[m" % "☓")
        $stderr.puts "#{mark} #{name}"
      end
    end
  end

  #
  # Hosefileで利用できる関数群
  #
  module DSL
    #
    # タスクの登録
    #
    def task(name, **opts, &block)
      name = name.to_s

      stdin = opts.delete(:in)
      files = Array(opts.delete(:files))
      if opts.size > 0
        raise "不明なオプション #{opts.keys.join(', ')} @ #{name}"
      end
      Task.tasks[name] = Task.new(name, stdin, files, block)
    end

    #
    # 実行に必要な環境変数の存在確認
    #
    def check_env(name)
      Task.require_envs[name.to_s] = true
    end
  end

  #
  # main の中から呼ばれるコマンド
  #
  module Command
    module_function

    def usage
      puts USAGE
      exit 1
    end

    def show_tasks
      Task.tasks.each do |key, t|
        ary = []
        ary << "STDIN: #{t.stdin}" if t.stdin
        ary << "FILES: #{t.files.join(', ')}" unless t.files.empty?
        puts "#{t.name}(#{ary.join(', ')}）"
      end
    end

    def run(name, outfile)
      TaskRunner.run(name, outfile)
    end
  end

  module_function

  #
  # エントリーポイント
  #
  def main
    return Command.usage if ARGV.empty?

    hosefile = nil
    task_name = nil
    show_task = false
    outfile   = nil

    args = ARGV.clone
    while args.size > 0
      arg = args.shift
      case arg
      when '-C'            ; hosefile = args.shift
      when '-o', '--output'; outfile = args.shift
      when '-T', '--tasks' ; show_task = true
      when /^-/            ; raise "不明なオプション: #{arg}"
      else                 ; task_name = arg
      end
    end
    if hosefile == nil
      hosefile = %w(Hosefile hosefile hosefile.rb).find{ |f| File.exist? f }
      raise 'Hosefileが見つかりません' unless hosefile
    end
    Object.__send__(:include, Hose::DSL)
    load hosefile
    return Command::show_tasks if show_task

    raise 'タスク名が指定されていません' unless task_name
    Command::run(task_name, outfile)

  rescue RuntimeError => e
    $stderr.puts e.message
    exit 1
  end
end

Hose::main
